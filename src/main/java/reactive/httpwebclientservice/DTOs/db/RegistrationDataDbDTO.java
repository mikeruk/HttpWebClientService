package reactive.httpwebclientservice.DTOs.db;

import jakarta.validation.constraints.*;

import java.time.LocalDateTime;

public class RegistrationDataDbDTO {


    private Long id; // Is generated by the database

    @NotBlank(message = "Username cannot be empty")
    @Size(min = 3, max = 20, message = "Username must be between 3 and 20 characters")
    private String username;

    @NotBlank(message = "Email cannot be empty")
    @Email(message = "Invalid email format")
    private String email;

    @NotBlank(message = "Password cannot be empty")
    @Size(min = 8, message = "Password must be at least 8 characters long")
    private String password;

    @PastOrPresent(message = "Registration date cannot be in the future")
    private LocalDateTime regDate;

    @NotNull(message = "Confirmation registration deadline is required")
    private LocalDateTime confirmRegDeadline;

    @PastOrPresent(message = "Confirmation registration date date cannot be in the future")
    private LocalDateTime confirmRegDate;




    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public @NotBlank(message = "Username cannot be empty") @Size(min = 3, max = 20, message = "Username must be between 3 and 20 characters") String getUsername() {
        return username;
    }

    public void setUsername(@NotBlank(message = "Username cannot be empty") @Size(min = 3, max = 20, message = "Username must be between 3 and 20 characters") String username) {
        this.username = username;
    }

    public @NotBlank(message = "Email cannot be empty") @Email(message = "Invalid email format") String getEmail() {
        return email;
    }

    public void setEmail(@NotBlank(message = "Email cannot be empty") @Email(message = "Invalid email format") String email) {
        this.email = email;
    }

    public @NotBlank(message = "Password cannot be empty") @Size(min = 8, message = "Password must be at least 8 characters long") String getPassword() {
        return password;
    }

    public void setPassword(@NotBlank(message = "Password cannot be empty") @Size(min = 8, message = "Password must be at least 8 characters long") String password) {
        this.password = password;
    }

    public @PastOrPresent(message = "Registration date cannot be in the future") LocalDateTime getRegDate() {
        return regDate;
    }

    public void setRegDate(@PastOrPresent(message = "Registration date cannot be in the future") LocalDateTime regDate) {
        this.regDate = regDate;
    }

    public @NotNull(message = "Confirmation registration deadline is required") LocalDateTime getConfirmRegDeadline() {
        return confirmRegDeadline;
    }

    public void setConfirmRegDeadline(@NotNull(message = "Confirmation registration deadline is required") LocalDateTime confirmRegDeadline) {
        this.confirmRegDeadline = confirmRegDeadline;
    }

    public @PastOrPresent(message = "Confirmation registration date date cannot be in the future") LocalDateTime getConfirmRegDate() {
        return confirmRegDate;
    }

    public void setConfirmRegDate(@PastOrPresent(message = "Confirmation registration date date cannot be in the future") LocalDateTime confirmRegDate) {
        this.confirmRegDate = confirmRegDate;
    }


    @Override
    public String toString() {
        return "RegistrationDataDbDTO{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", email='" + email + '\'' +
                ", password='" + password + '\'' +
                ", regDate=" + regDate +
                ", confirmRegDeadline=" + confirmRegDeadline +
                ", confirmRegDate=" + confirmRegDate +
                '}' +'\n';
    }
}
