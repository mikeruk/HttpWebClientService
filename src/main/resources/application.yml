spring:
  application:
    name: "HttpWebClientService"
eureka:
  client:
    service-url:
      defaultZone: "http://localhost:8761/eureka"
    register-with-eureka: true     # register as HttpWebClientService
    fetch-registry: true           # fetch registry to enable load-balancing
management:
  endpoints:
    web:
      exposure:
        include: metrics,prometheus,circuitbreakers,circuitbreakerevents



# ────────────────────────────────────────────────────────────────────────────
# This is your custom namespace. You could name it anything (e.g. "client:",
# "remote-api:", "user-service:", etc.). Here we chose "dservice:" to remind us
# that this is the base URL for our “dservice” backend, but we don't user it anymore.
# Now we added also service-id:backend-service , because we will use Eureka to resolve by service-id, which is 'backend-service'.
dservice:
  #base-url: http://localhost:8081 - hard coded URL is no longer needed, because we will use Eureka and resolve by service-id:
  service-id: "backend-service"
  use-eureka: true
  authToken: "superSecretToken"
  http:
    protocol: AUTO        # AUTO | H2 | H2C | H1
    tcp-keep-alive: true
    pool:
      max-connections: 200
      pending-acquire-timeout: 45s
      max-idle: 30s
      max-life: 5m
      evict-in-background: 60s
#  dservice: is not special to Spring. It’s simply a grouping key (a map) under which you put your settings.
#  Under dservice:, you create a property called base-url whose value is http://localhost:8081.
#  Later, your code will read user.base-url instead of having builder.baseUrl("http://localhost:8081") hard-coded.
    wiretap:
      format: TEXTUAL           # SIMPLE | TEXTUAL | HEX (aka HEX_DUMP)
      default:
        enabled: false          # leave normal traffic quiet
      upload:
        enabled: true           # only noisy when debugging uploads

logging:
  level:
    org.springframework.cloud.client.loadbalancer: DEBUG
    org.springframework.cloud.loadbalancer: DEBUG
    org.springframework.cloud.loadbalancer.core: DEBUG
    http.trace: DEBUG    # per-request (X-Debug-Log=true) logs go here
    reactive.httpwebclientservice.filters.HttpLoggingFilter: DEBUG
    reactor.netty.http.client.HttpClient: DEBUG # optional raw byte wiretap (Netty):
    # Narrow scope: only log the upload connector’s wiretap
    reactor.netty.http.client.HttpClient.upload: DEBUG
    reactor.netty.http.client.HttpClient.default: INFO


